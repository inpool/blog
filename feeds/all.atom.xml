<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>英银坡'S BLOG</title><link href="//www.inpool.xyz/" rel="alternate"></link><link href="//www.inpool.xyz/feeds/all.atom.xml" rel="self"></link><id>//www.inpool.xyz/</id><updated>2016-10-26T11:48:00+08:00</updated><entry><title>reStructuredText(一)——初探</title><link href="//www.inpool.xyz/tools/starting-restructuredtext.html" rel="alternate"></link><published>2016-10-26T11:48:00+08:00</published><updated>2016-10-26T11:48:00+08:00</updated><author><name>Inpool</name></author><id>tag:www.inpool.xyz,2016-10-26:tools/starting-restructuredtext.html</id><summary type="html">&lt;p&gt;这篇先系统的介绍一下reStructuredText(以下简称reST)中的一些基本概念，在后续的文章
中，会大概按照先常用后高级的顺序介绍。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;1.基本概念&lt;/h2&gt;
&lt;p&gt;一个reST的文档由许多 &lt;cite&gt;文档元素&lt;/cite&gt; (Body Elements)组成，我们先把文档理解成从上到下
的文本流，一个文档元素就是结构上与上下都没有关联的一块内容，我把他们类比为HTML
中的块元素。文档元素分为段落、列表、表格等很多类别。在文档元素中，有一种特殊的
存在，叫做 &lt;cite&gt;显式标记&lt;/cite&gt; (Explicit Markup)，用于对行内标记进行解释、说明，对文档结
构做辅助作用和插入一些复杂的文档元素。&lt;/p&gt;
&lt;p&gt;在文档元素内部，我们可以通过一些标记对内容进行格式化和说明，比如加粗、斜体、超
链接、脚注等，为了实现这部分功能，reST引入了 &lt;cite&gt;行内标记&lt;/cite&gt; (Inline Markup) 的概念，
我把他们类比为HTML中的内联元素。行内标记也有一种特殊的存在，叫做 &lt;cite&gt;解释文本&lt;/cite&gt;
(Interpreted Text) 。用于辅助行内标记的格式和一些比较复杂的格式定义。&lt;/p&gt;
&lt;p&gt;我们从一个reST文档源文件来直观的看一下各类元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="gh"&gt;示例reST文档&lt;/span&gt;
&lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="gh"&gt;===================&lt;/span&gt;
&lt;span class="lineno"&gt; 3 &lt;/span&gt;
&lt;span class="lineno"&gt; 4 &lt;/span&gt;&lt;span class="gh"&gt;标题一&lt;/span&gt;
&lt;span class="lineno"&gt; 5 &lt;/span&gt;&lt;span class="gh"&gt;------------&lt;/span&gt;
&lt;span class="lineno"&gt; 6 &lt;/span&gt;
&lt;span class="lineno"&gt; 7 &lt;/span&gt;&lt;span class="ge"&gt;*斜体输出*&lt;/span&gt; 是一个行内标记，
&lt;span class="lineno"&gt; 8 &lt;/span&gt;&lt;span class="gs"&gt;**加粗输出**&lt;/span&gt; 也是一个行内标记，
&lt;span class="lineno"&gt; 9 &lt;/span&gt;&lt;span class="s"&gt;`` *restructuredtext* ``&lt;/span&gt; 依旧是一个行内标记。
&lt;span class="lineno"&gt;10 &lt;/span&gt;这个 链接__ 到博客主页，而有些 &lt;span class="s"&gt;`链接 &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;link_&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;
&lt;span class="lineno"&gt;11 &lt;/span&gt;可以反复引用多次，比如现在换个名字链接到
&lt;span class="lineno"&gt;12 &lt;/span&gt;&lt;span class="s"&gt;`不带 www 的主页地址 &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;link_&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt; 。有时候有些链接在文
&lt;span class="lineno"&gt;13 &lt;/span&gt;中只出现一次，可以不用单独定义链接。比如：
&lt;span class="lineno"&gt;14 &lt;/span&gt;&lt;span class="s"&gt;`百度 &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://baidu.com&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt; 。
&lt;span class="lineno"&gt;15 &lt;/span&gt;
&lt;span class="lineno"&gt;16 &lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;__:&lt;/span&gt; http://www.inpool.xyz
&lt;span class="lineno"&gt;17 &lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_link:&lt;/span&gt; http://inpool.xyz
&lt;/pre&gt;&lt;/div&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="80%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;第1-2行&lt;/td&gt;
&lt;td&gt;文章的主标题，文档元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第4-5行&lt;/td&gt;
&lt;td&gt;文章的一级标题，文档元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第7-9行&lt;/td&gt;
&lt;td&gt;各种不同的行内标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第10行&lt;/td&gt;
&lt;td&gt;行内标记，匿名超链接和命名超链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第12行&lt;/td&gt;
&lt;td&gt;命名超链接，命名的超链接可以多次引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第14行&lt;/td&gt;
&lt;td&gt;直接内部指定URL的超链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第7-14行&lt;/td&gt;
&lt;td&gt;一个段落，文档元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;第16-17行&lt;/td&gt;
&lt;td&gt;显示标记，用于指定匿名链接和命名链接的URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;在上面的代码中，为了便于说明，我刻意把文档许多不同的部分分成多行，在实际使用中，
可以不用分开，输出效果是一样的。在这里列出一小段代码，主要是提供一个感性的认识，
具体元素的介绍在后面再介绍。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;2.空行和缩进&lt;/h2&gt;
&lt;p&gt;reST作为Python的官方支持格式，他的很多格式都是对缩进敏感的，一般推荐使用空格作为缩进
符号，如果使用了制表符（&amp;lt;Tab&amp;gt;），reST引擎会在处理前将其替换为8个空格，其余的空格（分
页符，纵向制表符等）都替换成1个空格。&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;空行&lt;/h3&gt;
&lt;p&gt;空行主要用于分隔不同的文档元素。除非在原文输出块中，多个连续的空行将被当作一个空行对
待。当可以明确指示一个文档元素结束时，空行可以省略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;缩进&lt;/h3&gt;
&lt;p&gt;用于指示一下内容：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;块引用&lt;/li&gt;
&lt;li&gt;定义列表中的定义&lt;/li&gt;
&lt;li&gt;当列表中某一项有多行时，第二行开始要缩进&lt;/li&gt;
&lt;li&gt;原文输出块&lt;/li&gt;
&lt;li&gt;显示标记的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缩进规则如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;同一个文档元素的缩进必须相同，即必须左对齐&lt;/li&gt;
&lt;li&gt;如果下一行内容的缩进比当前行的缩进少，则标识当前行所在的文档元素结束&lt;/li&gt;
&lt;li&gt;当文档元素的结构由符号开始，并有多行内容时，第二行开始缩进要与第一行
的文字左对齐&lt;/li&gt;
&lt;li&gt;当结构使用复杂标记（标记中可能出现任意字符）时，第二行的缩进量可以自
行决定，但第三行开始必须与第二行左对齐&lt;/li&gt;
&lt;li&gt;缩进可以嵌套，嵌套时将会产生更复杂的文档结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;3.转义机制&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;`&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;``&lt;/tt&gt; 等许多ASCII字符作为标记使用，但他们在普通的文字表述
时也同样有其意义，因此reST引入转义机制，用于标识将特殊的标记字符作为普通
字符看待。和许多其他领域一样，在reST中使用反斜杠(&lt;tt class="docutils literal"&gt;\&lt;/tt&gt;)用于转义。&lt;/p&gt;
&lt;p&gt;除空格外，其余任何紧跟在反斜杠后的字符都将被转义，转义结果为紧跟反斜杠的
字符本身，使其作为普通文本对待，而不会作为标记的开始或结束。对空格的转义
结果是将空格移除，也解释一个空的字符串。&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;当在程序中用reST格式写注释时，可能需要对反斜杠进行二次转义。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="reStructuredText"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Pelican(三) —— 基本使用</title><link href="//www.inpool.xyz/tools/pelican-usage.html" rel="alternate"></link><published>2016-05-16T19:21:00+08:00</published><updated>2016-05-16T19:21:00+08:00</updated><author><name>Inpool</name></author><id>tag:www.inpool.xyz,2016-05-16:tools/pelican-usage.html</id><summary type="html">&lt;p&gt;前面两篇文章简单介绍了以下pelican的基本内容，网上已经有很多关于使用pelican的文
章，我刚开始使用pelican的时候，也是看那些文章过来的，我觉得有些地方讲的不是很清
楚，所以还是决定写一下他的基本使用。&lt;/p&gt;
&lt;p&gt;对于每一个步骤，我先将相关的命令打出来，然后说明这个命令干了什么，以及有什么需
要注意的地方。&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;1. 安装python&lt;/h2&gt;
&lt;p&gt;对于linux用户来说，一般系统都自带了python环境，这一步可以省略。我认为Linux用户
有足够的能力安装下面提到的任何工具，所以后面不会对linxu额外作说明。&lt;/p&gt;
&lt;p&gt;由于pelican是使用python语言写的，所以首先要安装python。非python程序员建议直接安
装python 3.4版本，python 3以上自带了pip包管理工具，可以省去安装setuptools和pip
的步骤。可以直接到 &lt;a class="reference external" href="http://www.python.org/downloads"&gt;python官网&lt;/a&gt; 下载安装。不管32位还是64位系统，都选x86的安装包
就可以了。还有困难的，
点 &lt;a class="reference external" href="https://www.python.org/ftp/python/3.4.4/python-3.4.4.msi"&gt;这里&lt;/a&gt; 直接下载安
装，安装路径选默认的就可以了，一般是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Python34&lt;/span&gt;&lt;/tt&gt; ，后面谈及路径的时候都假设
python安装到这个地址了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;2. 添加环境变量&lt;/h2&gt;
&lt;p&gt;将 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Python34\Scripts&lt;/span&gt;&lt;/tt&gt; 添加到环境变量PATH中。如果省略这一步，后面的大部分
命令都需要在前面加上路径。具体添加方法自行百度。实在不会添加环境变量或者懒得添
加环境变量的，将下面的脚本保存为一个批处理命令，每次要执行下面的命令时，双击这
个批处理命令启动命令提示符就行了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
path C:\Python34\Scripts;%PATH%
start
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;2. 安装pelican&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ pip install pelican
&lt;/pre&gt;
&lt;p&gt;安装pelican和相关的依赖包，pip会自动下载相关的包并安装。安装完成后，在
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Python34\Scripts&lt;/span&gt;&lt;/tt&gt; 下会生成几个可执行文件，分别是 &lt;cite&gt;pelican.exe&lt;/cite&gt;,
&lt;cite&gt;pelican-import.exe&lt;/cite&gt;, &lt;cite&gt;pelican-quickstart.exe&lt;/cite&gt;, &lt;cite&gt;pelican-themes.exe&lt;/cite&gt;。
它们的用途：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="23%" /&gt;
&lt;col width="77%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;命令&lt;/th&gt;
&lt;th class="head"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;pelican&lt;/td&gt;
&lt;td&gt;读取将reStructuredText或Markdown源文件，生成静态博客。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pelican-import&lt;/td&gt;
&lt;td&gt;将feed, wordpress等格式的文件转换成reStructuredText(.rst)或
Markdown(.md)源文件，需要安装 &lt;cite&gt;pandoc&lt;/cite&gt; 以及其他一些依赖。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pelican-quickstart&lt;/td&gt;
&lt;td&gt;通过询问用户一些必要的信息，自动化生成pelican博客工程框架，
包括源文件目录、输出目录、配置文件和可选的makefile或fabfile。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pelican-themes&lt;/td&gt;
&lt;td&gt;pelican主题管理工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;3. 安装可选包&lt;/h2&gt;
&lt;p&gt;pelican默认支持使用reStructuredText写博客，如果要使用Markdown写博客，需要安装
Markdown支持:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install markdown
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;4. 新建博客工程&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir myblog
$ &lt;span class="nb"&gt;cd&lt;/span&gt; myblog
$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所谓的博客工程，其实就是一个文件夹，和博客所有相关的东西都在这个文件夹内。
一个典型的博客工程结构，可以参见前面的一篇文章 &lt;a class="reference external" href="//www.inpool.xyz/tools/pelican-basic.html"&gt;pelican(一)——基本理解&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;以上第一个和第二个命令，就是新建一个目录并进入这个目录，用于存放所有相关的内容。
这个目录(文件夹)名字可以随意。&lt;/p&gt;
&lt;p&gt;第三个命令用于创建基本结构，只要按顺序回答问题就行了。对于看不明白的，使用默认
值就OK。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;5. 写博客&lt;/h2&gt;
&lt;p&gt;好了，经过以上步骤，就可以开始用reStructuredText或Markdown写博客了，需要注意的
是reStructuredText的源文件用 &lt;tt class="docutils literal"&gt;.rst&lt;/tt&gt; 作为后缀名，而Markdown的源文件使用 &lt;tt class="docutils literal"&gt;.md&lt;/tt&gt;
作为后缀名。我是用rst的，具体语法等以后有空再写一个系列文章。&lt;/p&gt;
&lt;p&gt;博客的源文件需要放在content文件夹。如果不知道从哪下手的话，可以拷贝 &lt;a class="reference external" href="https://raw.githubusercontent.com/inpool/blog-inpool.github.io/master/content/tools/00.pelican/01.pelican-basic.rst"&gt;我的博客源码&lt;/a&gt;
行一个测试。只需要保存在content目录下，文件名随意。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;6. 生成博客&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个命令需要在 &lt;a class="reference internal" href="#id6"&gt;4. 新建博客工程&lt;/a&gt; 中创建的目录中执行，也就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt;
命令生成的 &lt;cite&gt;pelicanconf.py&lt;/cite&gt; 文件所在的文件夹。&lt;/p&gt;
&lt;p&gt;这条命令执行的操作是读取同目录下的 &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; 作为配置文件生成静态博客。
如果不想使用默认的配置文件，可以通过 &lt;tt class="docutils literal"&gt;pelican &lt;span class="pre"&gt;-s&lt;/span&gt; configfile&lt;/tt&gt; 指定配置文件。更
详细的用法可以通过 &lt;tt class="docutils literal"&gt;pelican &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/tt&gt; 查看。各配置项可以参看 &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/content.html"&gt;pelican官方文档&lt;/a&gt;
，这个官方文档是最新版本的，部分配置项只有github克隆下来的代码才支持，具体版本
支持的配置项，可以通过左下角选择对应的版本查看，当前环境安装的pelican版本，使用
&lt;tt class="docutils literal"&gt;pelican &lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/tt&gt; 查看。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="python"></category><category term="reStructuredText"></category></entry><entry><title>python包管理系统——pip的设置</title><link href="//www.inpool.xyz/tools/configure-pip.html" rel="alternate"></link><published>2016-05-11T15:00:00+08:00</published><updated>2016-05-11T15:00:00+08:00</updated><author><name>Inpool</name></author><id>tag:www.inpool.xyz,2016-05-11:tools/configure-pip.html</id><summary type="html">&lt;p&gt;pip是 &lt;a class="reference external" href="https://www.pypa.io/en/latest/"&gt;pypa&lt;/a&gt; 推荐的python包安装工具，作为包管理工具，就像debian的apt一样，应该都
可以自定义安装源，以加快包的下载速度。在pip中，我们也可以自定义她的安装源。&lt;/p&gt;
&lt;p&gt;要定义pip的安装源，首先需要找到她的配置文件，pip配置文件的位置，在6.0版本 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;
以后和6.0版本以前有一些区别，支持的范围也有一定的区别。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;pip的6.0是一个比较大的更新，6.0的前一个版本不是5.0，而是1.5.6。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="pip-6-0"&gt;
&lt;h2&gt;pip 6.0之后的版本&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;全局配置文件&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="82%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Unix/Linux/BSD&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;/etc/pip.conf&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MAC OS X&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;/Library/Application Support/pip/pip.conf&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows XP -&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Documents&lt;/span&gt; and Settings\All Users\Application Data\pip\pip.ini&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows 7 +&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\ProgramData\pip\pip.ini&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;在Windows Vista中，不支持全局配置文件。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;用户配置文件&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="23%" /&gt;
&lt;col width="77%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Unix/Linux/BSD&lt;/td&gt;
&lt;td&gt;$HOME/.config/pip/pip.conf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mac OS X&lt;/td&gt;
&lt;td&gt;$HOME/Library/Application Support/pip/pip.conf.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;%APPDATA%pippip.ini.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;虚拟环境配置文件&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="38%" /&gt;
&lt;col width="62%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Unix/Linux/BSD/Mac OS X&lt;/td&gt;
&lt;td&gt;$VIRTUAL_ENV/pip.conf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;%VIRTUAL_ENV%pip.ini&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;读取配置文件的顺序&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;读取全局配置文件&lt;/li&gt;
&lt;li&gt;读取用户配置文件，并于全局配置文件合并，冲突的配置项以用户配置覆盖全局配置&lt;/li&gt;
&lt;li&gt;读取虚拟环境配置文件，并于第2步的到的配置合并，冲突的配置以虚拟环境的配置为准&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;pip 6.0之前的版本&lt;/h2&gt;
&lt;p&gt;pip 6.0之前的版本，原则上只支持用户配置文件：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="53%" /&gt;
&lt;col width="47%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Unix/Linux/BSD/Mac OS X&lt;/td&gt;
&lt;td&gt;$HOME/.pip/pip.conf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;%HOME%pippip.ini&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以通过指定环境变量 &lt;tt class="docutils literal"&gt;PIP_CONFIG_FILE&lt;/tt&gt; 指定全局变量的文件名。pip 6.0之前
的版本只会读取一个配置文件。如果通过环境变量指定了，则默认位置的配置文件不会起
任何作用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;配置选项&lt;/h2&gt;
&lt;p&gt;pip的配置文件采用python的ini格式，针对每个pip的子命令的配置放在以子命令为名字的
配置段中，对所有命令起作用的配置放在 &lt;tt class="docutils literal"&gt;global&lt;/tt&gt; 段中。&lt;/p&gt;
&lt;p&gt;配置选项为所有能在命令行中指定的选项，取长选项名(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--&lt;/span&gt;&lt;/tt&gt; 开头的)。例如，我要从阿
里云的镜像服务器安装pelican，用命令行的方式应该是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install --index-url=http://mirrors.aliyun.com/pypi/simple --trusted-host=mirrors.aliyun.com pelican
&lt;/pre&gt;
&lt;p&gt;因为pip 6.0以后默认值信任https连接，所以阿里云的镜像需要加上信任的选项。如果每次
安装一个包都要输入这么一大串东西，关键是要把这个网址记住，想想都难受。通过下面这
个配置文件，就可以解决了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.aliyun.com/pypi/simple&lt;/span&gt;
&lt;span class="na"&gt;trusted-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;mirrors.aliyun.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在要从阿里云的镜像上安装pelican，只需要简单的输入:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install pelican
&lt;/pre&gt;
&lt;p&gt;现在安装一个包，下载速度以下提高了10几倍了。配合配置文件和download命令，在局域
网和离线的机器上，都可以用pip命令安装了。&lt;/p&gt;
&lt;p&gt;更多的配置项就不一一列举了，可以通过下面的命令查询:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip help [sub-command]
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="pip"></category><category term="python"></category><category term="package management"></category></entry><entry><title>Pelican(二) —— 文件元数据</title><link href="//www.inpool.xyz/tools/pelican-meta-data.html" rel="alternate"></link><published>2016-05-03T20:51:00+08:00</published><updated>2016-05-03T20:51:00+08:00</updated><author><name>Inpool</name></author><id>tag:www.inpool.xyz,2016-05-03:tools/pelican-meta-data.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基础&lt;/h2&gt;
&lt;p&gt;元数据是除了文章内容以外，对文章属性进行额外描述的数据，一般情况下，Pelican支持以下元数据：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;标题(Title)&lt;/li&gt;
&lt;li&gt;发布时间(Date)&lt;/li&gt;
&lt;li&gt;最后修改时间(Modified)&lt;/li&gt;
&lt;li&gt;分类(Category)&lt;/li&gt;
&lt;li&gt;标签(Tags)&lt;/li&gt;
&lt;li&gt;标识(Slug)&lt;/li&gt;
&lt;li&gt;作者(Author/Authors)&lt;/li&gt;
&lt;li&gt;状态(Status)&lt;/li&gt;
&lt;li&gt;摘要(Summary)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了标题以外，其他的元数据都不是必须提供的，如果没有明确提供，Pelican会试图从其他方面猜测元数据的值。&lt;/p&gt;
&lt;p&gt;在RST中，元数据的语法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;这是标题&lt;/span&gt;
&lt;span class="gh"&gt;########&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2016-05-03 11:39&lt;/span&gt;
&lt;span class="nc"&gt;:modified:&lt;/span&gt; &lt;span class="nf"&gt;2016-05-03 11:40&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;这是分类&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;这是标签, 另一个标签&lt;/span&gt;
&lt;span class="nc"&gt;:authors:&lt;/span&gt; &lt;span class="nf"&gt;作者, 另一个作者&lt;/span&gt;
&lt;span class="nc"&gt;:summary:&lt;/span&gt; &lt;span class="nf"&gt;这是摘要，对于比较长的摘要，&lt;/span&gt;
          可以另起一行并缩进
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="title"&gt;
&lt;h2&gt;标题(title)&lt;/h2&gt;
&lt;p&gt;标题就是一个文档的标题，不同的标记语言标识标题的方法不同，在RST中，第一个并且唯一的title元素被认为是整个文章的标题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date"&gt;
&lt;h2&gt;发布时间(date)&lt;/h2&gt;
&lt;p&gt;该文章的发布时间，若没有提供，Pelican会根据配置文件的 &lt;tt class="docutils literal"&gt;DEFAULT_DATE&lt;/tt&gt; 设定获取时间，当 &lt;tt class="docutils literal"&gt;DEFAULT_DATE = 'fs'&lt;/tt&gt; 时，从文件的修改时间提取。
由于文件的修改时间可能会由于各种原因发生变化，最好手动指定。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modified"&gt;
&lt;h2&gt;最后修改时间(modified)&lt;/h2&gt;
&lt;p&gt;文档的最后修改时间。若不提供，则取发布时间的值，认为文章发布后没有修改过，并不在文章页面显示。&lt;/p&gt;
&lt;p&gt;若在文章修改后添加修改时间，或改动修改时间，使其值比原值大，则pelican会自动更新feed。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="category"&gt;
&lt;h2&gt;分类(category)&lt;/h2&gt;
&lt;p&gt;表现为文章的分类。若不提供，则按照文章所在的文件夹分类，如果直接放在更目录，则为默认分类。默认分类可以在配置文件中指定。
若不指定，默认为misc。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tags"&gt;
&lt;h2&gt;标签(tags)&lt;/h2&gt;
&lt;p&gt;表现为文章的标签。若不提供，则认为文章没有标签。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="author-authors"&gt;
&lt;h2&gt;作者(author/authors)&lt;/h2&gt;
&lt;p&gt;文章的作者。若不提供，在从配置文件中提取。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status"&gt;
&lt;h2&gt;状态(status)&lt;/h2&gt;
&lt;p&gt;可取值为：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="82%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;取值&lt;/th&gt;
&lt;th class="head"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;hidden&lt;/td&gt;
&lt;td&gt;不在页面显示该文章或页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;draft&lt;/td&gt;
&lt;td&gt;作为草稿，不会在博客中出现任何链接到草稿的链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;published&lt;/td&gt;
&lt;td&gt;正式发布状态。只有published状态的文章才会发布&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;摘要(summary)&lt;/h2&gt;
&lt;p&gt;若不提供，则根据配置文件的设置 &lt;tt class="docutils literal"&gt;SUMMARY_MAX_LENGTH&lt;/tt&gt; 对文章的内容进行截取获得。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;从文件名取元数据&lt;/h2&gt;
&lt;p&gt;如果能严格的按照我们自己设计的规范命名源文件，则可以通过设置 &lt;tt class="docutils literal"&gt;FILENAME_METADATA&lt;/tt&gt; 配置项，从
文件名中提取元数据。例如：文件名为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;20160503_pelican-meta-data.rst&lt;/span&gt;&lt;/tt&gt; ，我们将 &lt;tt class="docutils literal"&gt;FILENAME_METADATA&lt;/tt&gt;
设置为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})_(?P&amp;lt;slug&amp;gt;.*)'&lt;/span&gt;&lt;/tt&gt; ，则不需要在文章内按前面说的格式声明元数据
信息，pelican会自动获取到data为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'2016-05-03'&lt;/span&gt;&lt;/tt&gt; ，而slug为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'pelican-meta-data'&lt;/span&gt;&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;采用这种方式时， &lt;tt class="docutils literal"&gt;FILENAME_METADATA&lt;/tt&gt; 的设置方法为正则表达式，需要一定的学习。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="blog"></category><category term="reStructuredText"></category></entry><entry><title>Pelican(一) —— 基本理解</title><link href="//www.inpool.xyz/tools/pelican-basic.html" rel="alternate"></link><published>2016-05-03T19:38:00+08:00</published><updated>2016-05-03T19:38:00+08:00</updated><author><name>Inpool</name></author><id>tag:www.inpool.xyz,2016-05-03:tools/pelican-basic.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Pelican有什么用&lt;/h2&gt;
&lt;p&gt;Pelican是使用python语言开发的一个静态博客生成工具。默认支持reStructureText和HTML，也可以轻松支持Markdown。&lt;/p&gt;
&lt;p&gt;我们平时写博客，一般是通过在博客网站注册一个帐号，然后就可以在里面写博客了。还有一种情况，就是自己在虚拟主机、
公有云或VPS上自己搭建一个博客程序。有了Pelican，现在我们又多了一种选择，就是在本地用reStructureText或Makedown
把文章写好，通过Pelican生成静态的html文件，然后把生成的静态文件上传到互联网能访问的地方就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;目录结构&lt;/h2&gt;
&lt;p&gt;我们使用Pelican写博客，首先要把源文件在本地写好，然后生成的静态文件也要有地方保存。
在pelican中，通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; 命令生成的文件夹中，如果不生成makefile和fabfile的话，目录结构如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
drwxr-xr-x 1 inpool 197121    0 五月  3 17:06 content/
-rwxr-xr-x 1 inpool 197121 2202 五月  3 10:50 develop_server.sh
drwxr-xr-x 1 inpool 197121    0 五月  3 15:11 output/
-rwxr-xr-x 1 inpool 197121  862 五月  3 10:50 pelicanconf.py
-rwxr-xr-x 1 inpool 197121  508 五月  3 10:50 publishconf.py
&lt;/pre&gt;
&lt;p&gt;各项的含义如下：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="22%" /&gt;
&lt;col width="78%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;文件/目录&lt;/th&gt;
&lt;th class="head"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;content/&lt;/td&gt;
&lt;td&gt;用于存放源文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;develop_server.sh&lt;/td&gt;
&lt;td&gt;用于启动简单的本地服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;output/&lt;/td&gt;
&lt;td&gt;用于存放pelican命令生成的目标文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pelicanconf.py&lt;/td&gt;
&lt;td&gt;pelican命令的默认配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;publishconf.py&lt;/td&gt;
&lt;td&gt;作用同pelicanconf.py，用于生成发布用博客的配置文件，需要手动指定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;逻辑结构&lt;/h2&gt;
&lt;p&gt;对于一个博客，基本要素就是文章、分类、归档和标签。在一个利用pelican生成的博客中，包含的要素有：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="82%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;要素&lt;/th&gt;
&lt;th class="head"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;文章(article)&lt;/td&gt;
&lt;td&gt;就是我们在博客上写的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;页面(page)&lt;/td&gt;
&lt;td&gt;在博客中，除了我们写的内容，还会有一些其他的东西，比如博主的自我介绍、
联系方式等，为了区别于正式的博客内容，pelican把它们传给页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;分类(category)&lt;/td&gt;
&lt;td&gt;就是分类，每个人的分类方法都会有一些不同，没什么好说的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;归档(archive)&lt;/td&gt;
&lt;td&gt;按照时间先后，将同一段时间发布的文章放在一起&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;标签(tag)&lt;/td&gt;
&lt;td&gt;我们写的博文可能会设计不同的几个方面，那就可以把这些作为标签加入到博文
的属性中。标签与分类的主要区别就是一个文章可以有多个标签，但只属于一个
分类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;作者(author)&lt;/td&gt;
&lt;td&gt;文章的作者，没什么好说的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中，文章是一等公民，除页面外(页面是服务于整个博客的)，其他所有的元素都服务于文章，是文章的一种
组织结构形态。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;分类、归档、标签和作者&lt;/h2&gt;
&lt;p&gt;在pelican中，我们只要维护文章和页面就行了，分类、归档、标签和作者都是由pelican自动维护的。pelican会
遍历所有的文章，在元数据中查询分类、标签和作者，并自动创建相应元素和静态页面。对于归档，pelican按照
文章的标识的时间，自动编排出来。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="blog"></category></entry><entry><title>如何管理Sublime Text的插件</title><link href="//www.inpool.xyz/tools/sublime-text-plugin.html" rel="alternate"></link><published>2015-05-20T18:37:00+08:00</published><updated>2015-05-20T18:37:00+08:00</updated><author><name>Inpool</name></author><id>tag:www.inpool.xyz,2015-05-20:tools/sublime-text-plugin.html</id><summary type="html">&lt;p&gt;sublime text的插件一般通过Package Control来管理，而Package Control本身也是一个插件：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;安装Package Control。使用 Ctrl+` 打开控制台。如果有其他软件的热键与这个热键
冲突的话，点击左下角的图标，弹出菜单中选择Console。然后在控制台中粘贴以下代码。&lt;/p&gt;
&lt;p&gt;Sublime Text 2:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')
&lt;/pre&gt;
&lt;p&gt;Sublime Text 3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Package Control安装过程中左下角会提示当前正在执行的步骤。安装完成后重启
sublime text。然后按 Ctrl+Shift+P ，输入&amp;quot; install package&amp;quot; 下面会出现几个选
项。选择&amp;quot;Package Control: Install Package&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;这时候Package Control会联网获取插件列表，获取完毕后就会显示出来。需要注意的
是中途不要切换出去，因为sublime text中途切换出去后弹出的窗口会自动关掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在可安装插件列表上面有个输入框，输入你要安装的插件 &amp;quot;emmet&amp;quot;，下面列表中不相关
的插件就会被过滤。自己看哪个是你要安装的插件，选中，回车。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;接下来package control 会自动下载选中的插件和依赖的插件，并安装。安装完成后一
般会弹出相关的说明，最好看一下，因为每个插件可能有单独的设置项、快捷键和用法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;最后可能会提示重启Sublime Text。按照提示关掉重启就好了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="plugin"></category></entry></feed>